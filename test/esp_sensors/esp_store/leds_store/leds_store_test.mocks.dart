// Mocks generated by Mockito 5.0.17 from annotations
// in iot_app/test/esp_sensors/esp_store/leds_store/leds_store_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:iot_app/esp_sensors/esp_service/esp_service.dart' as _i3;
import 'package:iot_app/esp_sensors/models/led.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLed_0 extends _i1.Fake implements _i2.Led {}

/// A class which mocks [EspService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEspService extends _i1.Mock implements _i3.EspService {
  MockEspService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Led>> fetchLeds() =>
      (super.noSuchMethod(Invocation.method(#fetchLeds, []),
              returnValue: Future<List<_i2.Led>>.value(<_i2.Led>[]))
          as _i4.Future<List<_i2.Led>>);
  @override
  _i4.Future<double> fetchTemperature() =>
      (super.noSuchMethod(Invocation.method(#fetchTemperature, []),
          returnValue: Future<double>.value(0.0)) as _i4.Future<double>);
  @override
  _i4.Future<_i2.Led> updateLed(_i2.Led? led) => (super.noSuchMethod(
      Invocation.method(#updateLed, [led]),
      returnValue: Future<_i2.Led>.value(_FakeLed_0())) as _i4.Future<_i2.Led>);
}
